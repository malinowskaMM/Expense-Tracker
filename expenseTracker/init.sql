
DROP TABLE IF EXISTS account CASCADE;
DROP TABLE IF EXISTS group_ CASCADE;
DROP TABLE IF EXISTS category CASCADE;
DROP TABLE IF EXISTS account_group_role CASCADE;
DROP TABLE IF EXISTS token CASCADE;
DROP TABLE IF EXISTS transaction CASCADE;
DROP TABLE IF EXISTS income CASCADE;
DROP TABLE IF EXISTS expense CASCADE;
DROP TABLE IF EXISTS login_entity CASCADE;

CREATE TABLE IF NOT EXISTS account
(
    id            BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    is_active     BOOLEAN,
    is_archived   BOOLEAN,
    is_enabled    BOOLEAN,
    register_date TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    language_     VARCHAR(255)                            NOT NULL,
    role          VARCHAR(255),
    email         VARCHAR(255)                            NOT NULL,
    password      VARCHAR(60)                             NOT NULL,
    version       BIGINT,
    CONSTRAINT pk_account PRIMARY KEY (id)
);

CREATE UNIQUE INDEX IF NOT EXISTS unique_email ON account (email);

CREATE TABLE IF NOT EXISTS group_
(
    id      BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    version BIGINT,
    name    VARCHAR(255),
    CONSTRAINT pk_group_ PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS category
(
    id          BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    version     BIGINT,
    name        VARCHAR(255),
    color       VARCHAR(255),
    description VARCHAR(255),
    group_id    BIGINT,
    is_default  BOOLEAN,
    CONSTRAINT pk_category PRIMARY KEY (id)
);

ALTER TABLE category
    ADD CONSTRAINT FK_CATEGORY_ON_GROUP FOREIGN KEY (group_id) REFERENCES group_ (id);

CREATE TABLE IF NOT EXISTS account_group_role
(
    id           BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    access_level VARCHAR(31),
    account_id   BIGINT                                  NOT NULL,
    group_id     BIGINT                                  NOT NULL,
    role         VARCHAR(255),
    version       BIGINT,
    CONSTRAINT pk_account_group_role PRIMARY KEY (id)
);

ALTER TABLE account_group_role
    ADD CONSTRAINT FK_ACCOUNT_GROUP_ROLE_ON_ACCOUNT FOREIGN KEY (account_id) REFERENCES account (id);

ALTER TABLE account_group_role
    ADD CONSTRAINT FK_ACCOUNT_GROUP_ROLE_ON_GROUP FOREIGN KEY (group_id) REFERENCES group_ (id);

CREATE TABLE IF NOT EXISTS token
(
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    token      VARCHAR(255),
    type       VARCHAR(255),
    revoked    BOOLEAN                                 NOT NULL,
    expired    BOOLEAN                                 NOT NULL,
    account_id BIGINT,
    CONSTRAINT pk_token PRIMARY KEY (id)
);

ALTER TABLE token
    ADD CONSTRAINT uc_token_token UNIQUE (token);

ALTER TABLE token
    ADD CONSTRAINT FK_TOKEN_ON_ACCOUNT FOREIGN KEY (account_id) REFERENCES account (id);

CREATE TABLE IF NOT EXISTS transaction
(
    id               BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    transaction_type VARCHAR(31),
    name             VARCHAR(255),
    category_id      BIGINT                                  NOT NULL,
    is_cyclic        BOOLEAN,
    period           INTEGER,
    period_unit      VARCHAR(255),
    date             date,
    amount           DECIMAL,
    account_id       BIGINT                                  NOT NULL,
    version       BIGINT,
    start_date DATE,
    end_date DATE,
    CONSTRAINT pk_transaction PRIMARY KEY (id)
);

ALTER TABLE transaction
    ADD CONSTRAINT FK_TRANSACTION_ON_ACCOUNT FOREIGN KEY (account_id) REFERENCES account (id);

ALTER TABLE transaction
    ADD CONSTRAINT FK_TRANSACTION_ON_CATEGORY FOREIGN KEY (category_id) REFERENCES category (id);

CREATE TABLE IF NOT EXISTS income
(
    id          BIGINT  NOT NULL,
    is_received BOOLEAN NOT NULL DEFAULT FALSE,
    CONSTRAINT pk_income PRIMARY KEY (id)
);

ALTER TABLE income
    ADD CONSTRAINT FK_INCOME_ON_ID FOREIGN KEY (id) REFERENCES transaction (id);

CREATE TABLE IF NOT EXISTS expense
(
    id      BIGINT  NOT NULL,
    is_done BOOLEAN NOT NULL DEFAULT FALSE,
    CONSTRAINT pk_expense PRIMARY KEY (id)
);

ALTER TABLE expense
    ADD CONSTRAINT FK_EXPENSE_ON_ID FOREIGN KEY (id) REFERENCES transaction (id);

CREATE TABLE IF NOT EXISTS login_entity
(
    id                        BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    invalid_login_counter     INTEGER,
    last_invalid_login_date   TIMESTAMP WITHOUT TIME ZONE,
    last_valid_login_date     TIMESTAMP WITHOUT TIME ZONE,
    CONSTRAINT pk_login_entity PRIMARY KEY (id)
);

INSERT INTO account (id, is_active, is_archived, is_enabled, register_date, language_, role, email, password, version)
VALUES
    (-1, true, false, true, '2023-01-01 00:00:00', 'enUS', 'USER', 'user1@example.com', '$2a$12$/CffB5hFug58q9lJM3elKOZ8LWCc6L4ep/QwZJu.4RsG7XbnsVwVa', 0),
    (-2, true, false, true, '2023-01-01 00:00:00', 'enUS', 'USER', 'user2@example.com', '$2a$12$/CffB5hFug58q9lJM3elKOZ8LWCc6L4ep/QwZJu.4RsG7XbnsVwVa', 0),
    (-3, true, false, true, '2023-01-01 00:00:00', 'plPL', 'USER', 'user3@example.com', '$2a$12$/CffB5hFug58q9lJM3elKOZ8LWCc6L4ep/QwZJu.4RsG7XbnsVwVa', 0),
    (-4, true, false, true, '2023-01-01 00:00:00', 'plPL', 'USER', 'user4@example.com', '$2a$12$/CffB5hFug58q9lJM3elKOZ8LWCc6L4ep/QwZJu.4RsG7XbnsVwVa', 0),
    (-5, true, false, true, '2023-01-01 00:00:00', 'enUS', 'USER', 'user5@example.com', '$2a$12$/CffB5hFug58q9lJM3elKOZ8LWCc6L4ep/QwZJu.4RsG7XbnsVwVa', 0),
    (-6, true, false, true, '2023-01-02 00:00:00', 'plPL', 'ADMIN','admin@example.com', '$2a$12$/CffB5hFug58q9lJM3elKOZ8LWCc6L4ep/QwZJu.4RsG7XbnsVwVa', 0),
    (-7, true, false, true, '2023-01-01 00:00:00', 'enUS', 'USER', 'test1@example.com', '$2a$12$/CffB5hFug58q9lJM3elKOZ8LWCc6L4ep/QwZJu.4RsG7XbnsVwVa', 0),
    (-8, true, false, true, '2023-01-01 00:00:00', 'enUS', 'USER', 'test2@example.com', '$2a$12$/CffB5hFug58q9lJM3elKOZ8LWCc6L4ep/QwZJu.4RsG7XbnsVwVa', 0),
    (-9, true, false, true, '2023-01-01 00:00:00', 'enUS', 'ADMIN', 'testAdmin@example.com', '$2a$12$/CffB5hFug58q9lJM3elKOZ8LWCc6L4ep/QwZJu.4RsG7XbnsVwVa', 0),
    (-10, true, false, true, '2023-01-01 00:00:00', 'enUS', 'USER', 'test3@example.com', '$2a$12$/CffB5hFug58q9lJM3elKOZ8LWCc6L4ep/QwZJu.4RsG7XbnsVwVa', 0);

-- Insert sample data for 'group_' table
INSERT INTO group_ (id, version, name)
VALUES
    (-1, 0, 'Group testowa 1'),
    (-2, 0, 'Group testowa 2'),
    (-3, 0, 'Group testowa 3'),
    (-4, 0, 'Dom rodzinny'),
    (-5, 0, 'Wynajem studia');

-- Insert sample data for 'category' table
INSERT INTO category (id, version, name, color, description, is_default, group_id)
VALUES
    (-1, 0, 'Default', '#7BD3EA', 'Default Category', true, -1),
    (-2, 0, 'Default', '#A1EEBD', 'Default Category', true, -2),
    (-3, 0, 'Kategoria testowa 2', '#F6F7C4', 'Opis kategorii testowej 2', false,  -1),
    (-4, 0, 'Kategoria testowa 3', '#F6D6D6', 'Opis kategorii testowej 3', false, -2),
    (-5, 0, 'Default', '#89B9AD', 'Default Category', true, -3),
    (-6, 0, 'Default', '#89B9AD', 'Default Category', true, -4),
    (-7, 0, 'Default', '#89B9AD', 'Default Category', true, -5),
    (-8, 0, 'Studia', '#AA1803', 'Kategoria dotycząca kosztów studiów', false,  -4),
    (-9, 0, 'Poduszka finansowa', '#BD613C', 'Kategoria dotycząca oszczędzania', false, -4),
    (-10, 0, 'Samochód', '#F1BAA1', 'Wydatki na samochód', false, -4),
    (-11, 0, 'Opłaty mieszkaniowe', '#BCAF4D', 'Wydatki związane z mieszkaniem', false, -4),
    (-12, 0, 'Stałe', '#6D8C00', 'Kategoria dotycząca stały wpłat i kosztów', false, -4),
    (-13, 0, 'Zmienne', '#469597', 'Kategoria dotycząca okolicznościowych wpłat i kosztów', false, -4),
    (-14, 0, 'Poduszka finansowa', '#5BA199', 'Kategoria dotycząca oszczędzania', false, -5),
    (-15, 0, 'Opłaty mieszkaniowe', '#BBC6C8', 'Wydatki związane z mieszkaniem', false, -5),
    (-16, 0, 'Stałe', '#E5E3E4', 'Kategoria dotycząca stały wpłat i kosztów', false, -5),
    (-17, 0, 'Zmienne', '#DDBEAA', 'Kategoria dotycząca okolicznościowych wpłat i kosztów', false, -5);

-- Insert sample data for 'account_group_role' table
INSERT INTO account_group_role (id, access_level, account_id, group_id, role, version)
VALUES
    (-1, 'USER', -1, -1, 'USER', 0),
    (-2, 'ADMIN', -2, -1, 'ADMIN', 0),
    (-5, 'USER', -3, -1, 'USER', 0),
    (-6, 'USER', -4, -1, 'USER', 0),
    (-3, 'USER', -3, -2, 'ADMIN', 0),
    (-7, 'USER', -5, -2, 'ADMIN', 0),
    (-4, 'ADMIN', -1, -2, 'ADMIN', 0),
    (-8, 'USER', -7, -4, 'ADMIN', 0),
    (-9, 'USER', -8, -4, 'USER', 0),
    (-10, 'USER', -10, -4, 'USER', 0),
    (-11, 'USER', -8, -5, 'ADMIN', 0),
    (-12, 'USER', -10, -5, 'USER', 0);

-- Insert sample data for 'token' table
INSERT INTO token (id, token, type, revoked, expired, account_id)
VALUES
    (-1, 'token1', 'ACCESS_TOKEN', false, false, -1),
    (-2, 'token2', 'REFRESH_TOKEN', false, false, -2);

-- Insert sample data for 'transaction' table
INSERT INTO transaction (id, transaction_type, name, category_id, is_cyclic, period, period_unit, start_date, end_date, amount, account_id, version)
VALUES
    (-1, 'INCOME', 'Przychód cykliczny testowy co 14 dni', -1, true, 14, 'DAY', date('2024-03-02'), null, 10.0, -1, 0),
    (-2, 'EXPENSE', 'Wydatek cykliczny testowy co 2 miesiace', -3, true, 2, 'MONTH', date('2024-03-15'), null, 1200.0, -1, 0),
    (-3, 'INCOME', 'Przychód jednorazowy testowy 1', -1, false, null, null, date('2024-04-05'), null, 200.0, -1, 0),
    (-4, 'EXPENSE', 'Wydatek jednorazowy testowy 1', -1, false, null, null, date('2024-05-13'), null, 500.0, -2, 0),
    (-5, 'INCOME', 'Przychód cykliczny testowy co 1 rok', -2, true, 1, 'YEAR', date('2024-04-01'), null, 100.0, -3, 0),
    (-6, 'EXPENSE', 'Wydatek cykliczny testowy co 5 dni', -2, true, 5, 'DAY', date('2024-03-02'), date('2024-03-22'), 20.0, -5, 0),
    (-7, 'INCOME', 'Przychód cykliczny testowy co 20 dni', -3, true, 20, 'DAY', date('2024-03-24'), date('2024-04-24'), 150.0, -1, 0),
    (-8, 'EXPENSE', 'Wydatek cykliczny testowy co 1 miesiac', -3, true, 1, 'MONTH', date('2024-03-10'), null, 2000.0, -1, 0),
    (-9, 'INCOME', 'Przychód jednorazowy testowy 2', -3, false, null, null, date('2024-04-25'), null, 500.0, -1, 0),
    (-10, 'EXPENSE', 'Wydatek jednorazowy testowy 2', -1, false, null, null, date('2024-05-29'), null, 1200.0, -1, 0),
    (-11, 'EXPENSE', 'Pomoc studentowi', -8, true, 1, 'MONTH', date('2024-04-12'), null, 2500, -7, 0),
    (-12, 'EXPENSE', 'Kaucja mieszkanie studenta', -1, false, null, null, date('2024-04-12'), null, 3000.0, -7, 0),
    (-13, 'EXPENSE', 'Oszczędzanie', -9, true, 1, 'MONTH', date('2024-04-01'), null, 1500, -7, 0),
    (-14, 'EXPENSE', 'Zmiana opon', -10, false, null, null, date('2024-04-02'), null, 200.0, -7, 0),
    (-15, 'EXPENSE', 'Paliwo (kwiecień)', -10, false, null, null, date('2024-04-02'), null, 402.33, -7, 0),
    (-16, 'EXPENSE', 'Paliwo (maj)', -10, false, null, null, date('2024-05-12'), null, 101.89, -7, 0),
    (-17, 'EXPENSE', 'Paliwo (czerwiec)', -10, false, null, null, date('2024-06-22'), null, 354.76, -7, 0),
    (-18, 'EXPENSE', 'Czynsz', -11, true, 1, 'MONTH', date('2024-04-10'), null, 700, -7, 0),
    (-19, 'EXPENSE', 'Prąd', -11, true, 2, 'MONTH', date('2024-04-12'), null, 300, -7, 0),
    (-20, 'EXPENSE', 'Basen', -12, true, 7, 'DAY', date('2024-04-05'), null, 50, -7, 0),
    (-21, 'EXPENSE', 'Jedzenie', -12, true, 7, 'DAY', date('2024-04-05'), null, 300, -7, 0),
    (-22, 'INCOME', 'Wypłata', -12, true, 1, 'MONTH', date('2024-04-01'), null, 11000.0, -7, 0),
    (-23, 'EXPENSE', 'Ubezpieczenie', -12, true, 1, 'MONTH', date('2024-04-01'), null, 50, -7, 0),
    (-24, 'EXPENSE', 'Ubezpieczenie samochodu', -10, true, 1, 'YEAR', date('2024-04-11'), null, 1500, -7, 0),
    (-25, 'EXPENSE', 'Kino', -13, false, null, null, date('2024-05-07'), null, 120.50, -7, 0),
    (-26, 'EXPENSE', 'Ubrania lato', -13, false, null, null, date('2024-06-02'), null, 702.33, -7, 0),
    (-27, 'INCOME', 'Kieszonkowe', -16, true, 1, 'MONTH', date('2024-04-12'), null, 2500.0, -8, 0),
    (-28, 'INCOME', 'Wypłata z kawiarnii', -16, true, 1, 'MONTH', date('2024-04-12'), null, 1500.0, -8, 0),
    (-29, 'EXPENSE', 'Jedzenie', -16, true, 7, 'DAY', date('2024-04-05'), null, 200, -8, 0),
    (-30, 'EXPENSE', 'Wynajem', -15, true, 1, 'MONTH', date('2024-04-15'), null, 2000, -8, 0),
    (-31, 'EXPENSE', 'Internet', -15, true, 1, 'MONTH', date('2024-04-28'), null, 80, -8, 0),
    (-32, 'EXPENSE', 'Oszczędzanie', -14, true, 1, 'MONTH', date('2024-04-28'), null, 250, -8, 0),
    (-33, 'EXPENSE', 'Czesne studia', -16, true, 1, 'MONTH', date('2024-04-21'), null, 680, -8, 0),
    (-34, 'EXPENSE', 'Komunikacja miejska', -16, true, 1, 'MONTH', date('2024-04-02'), null, 120, -8, 0),
    (-35, 'EXPENSE', 'Media (netflix, HBOgo)', -16, true, 1, 'MONTH', date('2024-04-12'), null, 70, -8, 0),
    (-36, 'EXPENSE', 'Urodziny', -17, false, null, null, date('2024-06-22'), null, 300.0, -8, 0),
    (-37, 'EXPENSE', 'Randka', -17, false, null, null, date('2024-04-22'), null, 200.0, -8, 0),
    (-38, 'EXPENSE', 'Randka', -17, false, null, null, date('2024-04-25'), null, 50.0, -8, 0),
    (-39, 'EXPENSE', 'Randka', -17, false, null, null, date('2024-05-16'), null, 100.0, -8, 0),
    (-40, 'EXPENSE', 'Kolacja ze znajomymi', -17, false, null, null, date('2024-06-25'), null, 250.50, -8, 0);

INSERT INTO login_entity (invalid_login_counter, last_invalid_login_date, last_valid_login_date, id)
VALUES
    (1, '2023-01-01 00:00:00', '2023-01-01 00:00:00', -1),
    (2, '2023-01-01 00:00:00', '2023-01-01 00:00:00', -2),
    (2, '2023-01-01 00:00:00', '2023-01-01 00:00:00', -3),
    (1, '2023-01-01 00:00:00', '2023-01-01 00:00:00', -4),
    (2, '2023-01-01 00:00:00', '2023-01-01 00:00:00', -5),
    (2, '2023-01-01 00:00:00', '2023-01-01 00:00:00', -6),
    (0, '2023-01-01 00:00:00', '2023-01-01 00:00:00', -7),
    (0, '2023-01-01 00:00:00', '2023-01-01 00:00:00', -8),
    (0, '2023-01-01 00:00:00', '2023-01-01 00:00:00', -9),
    (0, '2023-01-01 00:00:00', '2023-01-01 00:00:00', -10);

DROP ROLE IF EXISTS expenseTrackerManager;
DROP ROLE IF EXISTS expenseTrackerAdmin;

CREATE USER expenseTrackerManager WITH ENCRYPTED PASSWORD 'CHqZxv5R1';
CREATE USER expenseTrackerAdmin WITH ENCRYPTED PASSWORD 'obSjEBGaX';

GRANT SELECT, INSERT, DELETE, UPDATE ON TABLE public.account TO expensetrackeradmin;
GRANT SELECT, INSERT, DELETE, UPDATE ON TABLE public.token TO expensetrackeradmin;
GRANT SELECT, INSERT, DELETE, UPDATE ON TABLE public.login_entity TO expensetrackeradmin;
GRANT SELECT ON TABLE public.account_group_role TO expensetrackeradmin;
GRANT SELECT ON TABLE public.group_ TO expensetrackeradmin;
GRANT SELECT ON TABLE public.category TO expensetrackeradmin;
GRANT SELECT ON TABLE public.expense TO expensetrackeradmin;
GRANT SELECT ON TABLE public.income TO expensetrackeradmin;
GRANT SELECT ON TABLE public.transaction TO expensetrackeradmin;

GRANT SELECT, INSERT, DELETE, UPDATE ON TABLE public.account TO expensetrackermanager;
GRANT SELECT, INSERT, DELETE, UPDATE ON TABLE public.token TO expensetrackermanager;
GRANT SELECT, INSERT, DELETE, UPDATE ON TABLE public.login_entity TO expensetrackermanager;
GRANT SELECT, INSERT, DELETE, UPDATE ON TABLE public.account_group_role TO expensetrackermanager;
GRANT SELECT, INSERT, DELETE, UPDATE ON TABLE public.category TO expensetrackermanager;
GRANT SELECT, INSERT, DELETE, UPDATE ON TABLE public.expense TO expensetrackermanager;
GRANT SELECT, INSERT, DELETE, UPDATE ON TABLE public.income TO expensetrackermanager;
GRANT SELECT, INSERT, DELETE, UPDATE ON TABLE public.transaction TO expensetrackermanager;
GRANT SELECT, INSERT, UPDATE ON TABLE public.group_ TO expensetrackermanager;