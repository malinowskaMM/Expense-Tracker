
DROP TABLE IF EXISTS account CASCADE;
DROP TABLE IF EXISTS group_ CASCADE;
DROP TABLE IF EXISTS category CASCADE;
DROP TABLE IF EXISTS account_group_role CASCADE;
DROP TABLE IF EXISTS token CASCADE;
DROP TABLE IF EXISTS transaction CASCADE;
DROP TABLE IF EXISTS income CASCADE;
DROP TABLE IF EXISTS expense CASCADE;
DROP TABLE IF EXISTS login_entity CASCADE;

CREATE TABLE IF NOT EXISTS account
(
    id            BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    is_active     BOOLEAN,
    is_archived   BOOLEAN,
    is_enabled    BOOLEAN,
    register_date TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    language_     VARCHAR(255)                            NOT NULL,
    role          VARCHAR(255),
    email         VARCHAR(255)                            NOT NULL,
    password      VARCHAR(60)                             NOT NULL,
    version       BIGINT,
    CONSTRAINT pk_account PRIMARY KEY (id)
);

CREATE UNIQUE INDEX IF NOT EXISTS unique_email ON account (email);

CREATE TABLE IF NOT EXISTS group_
(
    id      BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    version BIGINT,
    name    VARCHAR(255),
    CONSTRAINT pk_group_ PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS category
(
    id          BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    version     BIGINT,
    name        VARCHAR(255),
    color       VARCHAR(255),
    description VARCHAR(255),
    group_id    BIGINT,
    is_default  BOOLEAN,
    CONSTRAINT pk_category PRIMARY KEY (id)
);

ALTER TABLE category
    ADD CONSTRAINT FK_CATEGORY_ON_GROUP FOREIGN KEY (group_id) REFERENCES group_ (id);

CREATE TABLE IF NOT EXISTS account_group_role
(
    id           BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    access_level VARCHAR(31),
    account_id   BIGINT                                  NOT NULL,
    group_id     BIGINT                                  NOT NULL,
    role         VARCHAR(255),
    version       BIGINT,
    CONSTRAINT pk_account_group_role PRIMARY KEY (id)
);

ALTER TABLE account_group_role
    ADD CONSTRAINT FK_ACCOUNT_GROUP_ROLE_ON_ACCOUNT FOREIGN KEY (account_id) REFERENCES account (id);

ALTER TABLE account_group_role
    ADD CONSTRAINT FK_ACCOUNT_GROUP_ROLE_ON_GROUP FOREIGN KEY (group_id) REFERENCES group_ (id);

CREATE TABLE IF NOT EXISTS token
(
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    token      VARCHAR(255),
    type       VARCHAR(255),
    revoked    BOOLEAN                                 NOT NULL,
    expired    BOOLEAN                                 NOT NULL,
    account_id BIGINT,
    CONSTRAINT pk_token PRIMARY KEY (id)
);

ALTER TABLE token
    ADD CONSTRAINT uc_token_token UNIQUE (token);

ALTER TABLE token
    ADD CONSTRAINT FK_TOKEN_ON_ACCOUNT FOREIGN KEY (account_id) REFERENCES account (id);

CREATE TABLE IF NOT EXISTS transaction
(
    id               BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    transaction_type VARCHAR(31),
    name             VARCHAR(255),
    category_id      BIGINT                                  NOT NULL,
    is_cyclic        BOOLEAN,
    period           INTEGER,
    period_unit      VARCHAR(255),
    date             date,
    amount           DECIMAL,
    account_id       BIGINT                                  NOT NULL,
    version       BIGINT,
    start_date DATE,
    end_date DATE,
    CONSTRAINT pk_transaction PRIMARY KEY (id)
);

ALTER TABLE transaction
    ADD CONSTRAINT FK_TRANSACTION_ON_ACCOUNT FOREIGN KEY (account_id) REFERENCES account (id);

ALTER TABLE transaction
    ADD CONSTRAINT FK_TRANSACTION_ON_CATEGORY FOREIGN KEY (category_id) REFERENCES category (id);

CREATE TABLE IF NOT EXISTS income
(
    id          BIGINT  NOT NULL,
    is_received BOOLEAN NOT NULL DEFAULT FALSE,
    CONSTRAINT pk_income PRIMARY KEY (id)
);

ALTER TABLE income
    ADD CONSTRAINT FK_INCOME_ON_ID FOREIGN KEY (id) REFERENCES transaction (id);

CREATE TABLE IF NOT EXISTS expense
(
    id      BIGINT  NOT NULL,
    is_done BOOLEAN NOT NULL DEFAULT FALSE,
    CONSTRAINT pk_expense PRIMARY KEY (id)
);

ALTER TABLE expense
    ADD CONSTRAINT FK_EXPENSE_ON_ID FOREIGN KEY (id) REFERENCES transaction (id);

CREATE TABLE IF NOT EXISTS login_entity
(
    id                        BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    invalid_login_counter     INTEGER,
    last_invalid_login_date   TIMESTAMP WITHOUT TIME ZONE,
    last_valid_login_date     TIMESTAMP WITHOUT TIME ZONE,
    CONSTRAINT pk_login_entity PRIMARY KEY (id)
);

DROP ROLE IF EXISTS expenseTrackerManager;
DROP ROLE IF EXISTS expenseTrackerAdmin;

CREATE USER expenseTrackerManager WITH ENCRYPTED PASSWORD 'CHqZxv5R1';
CREATE USER expenseTrackerAdmin WITH ENCRYPTED PASSWORD 'obSjEBGaX';

GRANT SELECT, INSERT, DELETE, UPDATE ON TABLE public.account TO expensetrackeradmin;
GRANT SELECT, INSERT, DELETE, UPDATE ON TABLE public.token TO expensetrackeradmin;
GRANT SELECT, INSERT, DELETE, UPDATE ON TABLE public.login_entity TO expensetrackeradmin;
GRANT SELECT ON TABLE public.account_group_role TO expensetrackeradmin;
GRANT SELECT ON TABLE public.group_ TO expensetrackeradmin;
GRANT SELECT ON TABLE public.category TO expensetrackeradmin;
GRANT SELECT ON TABLE public.expense TO expensetrackeradmin;
GRANT SELECT ON TABLE public.income TO expensetrackeradmin;
GRANT SELECT ON TABLE public.transaction TO expensetrackeradmin;

GRANT SELECT, INSERT, DELETE, UPDATE ON TABLE public.account TO expensetrackermanager;
GRANT SELECT, INSERT, DELETE, UPDATE ON TABLE public.token TO expensetrackermanager;
GRANT SELECT, INSERT, DELETE, UPDATE ON TABLE public.login_entity TO expensetrackermanager;
GRANT SELECT, INSERT, DELETE, UPDATE ON TABLE public.account_group_role TO expensetrackermanager;
GRANT SELECT, INSERT, DELETE, UPDATE ON TABLE public.category TO expensetrackermanager;
GRANT SELECT, INSERT, DELETE, UPDATE ON TABLE public.expense TO expensetrackermanager;
GRANT SELECT, INSERT, DELETE, UPDATE ON TABLE public.income TO expensetrackermanager;
GRANT SELECT, INSERT, DELETE, UPDATE ON TABLE public.transaction TO expensetrackermanager;
GRANT SELECT, INSERT, UPDATE ON TABLE public.group_ TO expensetrackermanager;